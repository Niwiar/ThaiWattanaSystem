// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  username           String               @unique
  password           String
  email              String               @unique
  permission         String
  active             Boolean              @default(true)
  employeePayment    EmployeePayment[]
  employeeAttendance EmployeeAttendance[]
  employeeLeave      EmployeeLeave[]

  @@map("user")
}

model Working {
  id            Int      @id @default(autoincrement())
  workday       String
  startWorktime String
  stopWorktime  String
  lateTime      String // Minute
  updateAt      DateTime @default(now())

  @@map("working")
}

model Holiday {
  id   Int      @id @default(autoincrement())
  date DateTime @db.Date
  name String

  @@map("holiday")
}

model Position {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  active   Boolean    @default(true)
  employee Employee[]

  @@map("position")
}

model Team {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  active   Boolean    @default(true)
  employee Employee[]
  role     Role[]

  @@map("team")
}

model Role {
  id       Int        @id @default(autoincrement())
  name     String
  teamId   Int
  active   Boolean    @default(true)
  team     Team?      @relation(fields: [teamId], references: [id])
  employee Employee[]

  @@map("role")
}

model Payment {
  id              Int               @id @default(autoincrement())
  type            Int // 1 OT, 2 Allowance, 3 Welfare, 4 Deduction
  name            String            @unique
  amount          Float
  payType         Int // 1 Hourly, 2 Daily, 3 Monthly
  active          Boolean           @default(true)
  paymentEmployee PaymentEmployee[]

  @@map("payment")
}

model Employee {
  id                 Int                  @id @default(autoincrement())
  name               String
  employeeCode       String               @unique
  salary             Float
  payType            Int // 0 Hourly, 1 Daily, 2 Monthly
  leaveBusiness      Int
  leaveSick          Int
  workdate           DateTime?            @db.Date
  birthdate          DateTime?            @db.Date
  gender             String
  address            String?
  tel                String?
  nationality        String?
  socialServiceId    String?
  citizenId          String?
  citizenCardFile    String?
  jobApplicationFile String?
  imageFile          String?
  workPermitFile     String?
  active             Boolean              @default(true)
  bankName           String?
  bankAccountNo      String?
  bankAccountHolder  String?
  teamId             Int?
  roleId             Int?
  positionId         Int?
  team               Team?                @relation(fields: [teamId], references: [id])
  role               Role?                @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  position           Position?            @relation(fields: [positionId], references: [id])
  paymentEmployee PaymentEmployee[]
  employeeAttendance EmployeeAttendance[]
  employeeLeave      EmployeeLeave[]
  billing            Billing[]

  @@map("employee")
}

model PaymentEmployee {
  id  Int @id @default(autoincrement())
  paymentId Int
  employeeId Int
  amount Float
  active Boolean @default(true)
  employeePayment EmployeePayment[]
  payment   Payment  @relation(fields: [paymentId], references: [id])
  employee   Employee  @relation(fields: [employeeId], references: [id])

  @@map("paymentEmployee")
}

model EmployeeAttendance {
  id         BigInt   @id @default(autoincrement())
  employeeId Int
  createdBy  Int?
  date       DateTime @default(now()) @db.Date
  createdAt  DateTime @default(now())
  imageFile  String?

  user     User?    @relation(fields: [createdBy], references: [id])
  employee Employee @relation(fields: [employeeId], references: [id])

  @@map("employeeAttendance")
}

model EmployeeLeave {
  id         BigInt   @id @default(autoincrement())
  employeeId Int
  type       Int // 1 Business, 2 Sick
  date       DateTime
  period     Int? // 1 Allday, 2 Morning, 3 Noon
  createdAt  DateTime @default(now())
  createdBy  Int?
  user       User?    @relation(fields: [createdBy], references: [id])
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("employeeLeave")
}

model EmployeePayment {
  id        BigInt   @id @default(autoincrement())
  billingId BigInt
  paymentEmployeeId Int
  date      DateTime @db.Date
  type      Int // 1 OT, 2 Allowance, 3 Welfare, 4 Deduction
  amount    Float
  payType   Int // 0 Hourly, 1 Daily, 2 Monthly
  period    Float // Time in Hour/Day/Month Unit
  createdAt DateTime @default(now())
  createdBy Int?
  user      User?    @relation(fields: [createdBy], references: [id])
  paymentEmployee   PaymentEmployee  @relation(fields: [paymentEmployeeId], references: [id],onDelete: NoAction,onUpdate: NoAction)
  billing   Billing  @relation(fields: [billingId], references: [id])

  @@map("employeePayment")
}

model Billing {
  id              BigInt            @id @default(autoincrement())
  month           String
  employeeId      Int
  payDate         DateTime?         @db.Date
  salary          Float?
  income          Float?
  deduction       Float?
  paid            Boolean           @default(false)
  employeePayment EmployeePayment[]
  employee        Employee          @relation(fields: [employeeId], references: [id])

  @@map("billing")
}
